/* 
 * ==============================================================
 * testMqtt.qa
 * ==============================================================
 */       
System sonarSensorEmitter   
Dispatch polarMsg	: p( Distance, Angle  )  
Event     polar     : p( Distance, Angle  )

pubSubServer  "tcp://m2m.eclipse.org:1883"  
//pubSubServer  "tcp://test.mosquitto.org:1883"

Context  ctxTestMqtt  ip [ host="192.168.1.19"   port=5023 ]       
   
QActor qatestemitter context ctxTestMqtt  { 
Rules{
//	p(10,120).	p(20,120).	p(30,120).	p(40,120).	p(50,120).	  
//	p(60,120).  p(70,120).	p(80,120).	p(10,120).   p(20,120).	
	p(80,0).	p(80,30).	p(30,50).	p(80,60).	p(20,70).	   
	p(80,90).	p(80,120).	p(10,130).	p(80,150). 	p(80,180).	

} 
 	Plan init normal  [      
  		 connectAsPublisher "unibo/mqtt/radar"
  	]       
  	switchTo dopublish   	
 	Plan dopublish  [		  
 		delay  700 ; 
  		//[ !? p(D,A)] publishMSg  "unibo/mqtt/radar" for "perceiver"    -m polarMsg : p( D, A  )  ;
  		[ !? p(D,A)] publishMSg  "unibo/mqtt/radar" for "radarguimqtt" -m polarMsg : p( D, A  )  ;
 		delay 500;
 		[ ?? p(D,A)] publishEvent "unibo/mqtt/radar" -m polar : p( D, A  ) else endPlan "qatestemitterends"
 	]
 	finally repeatPlan
}

QActor perceiver context ctxTestMqtt  { 
 	Plan init normal  [  
 		println("perceiver STARTS")  ;  
  		connectAsSubscriber "unibo/mqtt/radar"
  	]       
  	switchTo doperceive
  	
  	Plan doperceive []
  	transition stopAfter 6000000
	  	whenEvent polar : p( D, A  )    do println ( perceived( p( D, A  ) ) ) ,
	  	whenMsg   polarMsg : p( D, A )  do println ( received( p( D, A  ) ) )
	finally repeatPlan
}
